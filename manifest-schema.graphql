scalar String
scalar File

type Schema {
  file: File!
}

union DataSource = EthereumContractDataSource

type EthereumContractDataSource {
  kind: String!
  name: String!
  network: String
  source: EthereumContractSource!
  mapping: EthereumContractMapping!
}

type EthereumContractSource {
  address: String!
  abi: String!
}

type EthereumContractMapping {
  kind: String!
  apiVersion: String!
  language: String!
  file: File!
  entities: [String!]!
  abis: [EthereumContractAbi!]!
  blockHandler: EthereumBlockHandler
  transactionHandlers: [EthereumTransactionHandler!]
  eventHandlers: [EthereumContractEventHandler!]
}

type EthereumContractAbi {
  name: String!
  file: File!
}

type EthereumBlockHandler {
  handler: String!
}

type EthereumTransactionHandler {
  function: String!
  handler: String!
}

type EthereumContractEventHandler {
  event: String!
  handler: String!
}

type SubgraphManifest {
  specVersion: String!
  schema: Schema!
  description: String
  repository: String
  dataSources: [DataSource!]!
}
